{"version":3,"sources":["components/CodeRepoCards.js","components/BarComponent.js","App.js","reportWebVitals.js","index.js"],"names":["CodeRepoCards","props","handleChange","bind","state","codeData","responseShown","user","cardsToShow","e","this","setState","target","value","getData","a","prevProps","name","url","fetch","response","json","data","responseLimit","dataLimit","console","log","dataArr","Array","isArray","slice","i","codeArr","length","fork","splice","date1","Date","date2","updated_at","diffTime","Math","abs","diffDays","ceil","freshness","className","map","item","index","description","created_at","toLocaleDateString","size","toLocaleString","href","html_url","rel","homepage","React","BarComponent","randomCode","maxGraphItems","graphXData","graphYDataFreshness","graphYDataSize","getApiData","userRepo","ids","Promise","all","id","then","results","resultantArr","repoNameArr","repoFreshnessArr","repoSizeArr","push","error","dataCommitDays","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","dataSize","width","height","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","scaleLabel","display","labelString","xAxes","App","content","type","onChange","defaultValue","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0424f0a.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './CodeRepoCards.css';\r\n\r\nexport default class CodeRepoCards extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            codeData: [],\r\n            responseShown: [],\r\n            user: 'icyrealm',\r\n            cardsToShow: '10'\r\n        };\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({             \r\n            user: e.target.value\r\n        }, () => {\r\n            this.getData(1);\r\n        });\r\n    } \r\n\r\n    async componentDidMount(){\r\n        this.getData(2);\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.name !== this.props.name){\r\n            this.setState({          \r\n                user: this.props.name\r\n            });\r\n        }\r\n        this.getData();\r\n      }\r\n\r\n    async getData(){\r\n        // get\r\n        const url = 'https://api.github.com/users/'+this.props.name+'/repos';\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n\r\n        // log api call imit\r\n        const urlLimit = 'https://api.github.com/rate_limit';\r\n        const responseLimit = await fetch(urlLimit);\r\n        const dataLimit = await responseLimit.json();\r\n        console.log(dataLimit);\r\n\r\n        // set\r\n        let dataArr = [];\r\n        try {\r\n            dataArr = data;\r\n            console.log(dataArr);\r\n        } catch(e) {\r\n            console.log(\"Data could not be parsed.\");     \r\n        }\r\n\r\n        if (!Array.isArray(dataArr)){\r\n            dataArr = [];\r\n        }\r\n\r\n        this.setState({\r\n            codeData: dataArr,\r\n            responseShown: dataArr.slice(0,this.state.cardsToShow)\r\n        });\r\n\r\n    }\r\n\r\n    render(){\r\n        // Don't show forked repositories\r\n        var codeArr = this.state.codeData;\r\n        var i;\r\n        for (i = codeArr.length - 1; i >= 0; i -= 1) {\r\n            if (codeArr[i].fork == true) {\r\n                codeArr.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        // Add new object to array: freshness\r\n        for (i = codeArr.length - 1; i >= 0; i -= 1) {\r\n            const date1 = new Date();\r\n            const date2 = new Date(codeArr[i].updated_at);            \r\n            const diffTime = Math.abs(date2 - date1);\r\n            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n            codeArr[i].freshness = diffDays;                           \r\n        }\r\n        \r\n        return <div className='card-container'>       \r\n\r\n            <div className=\"code-card-container\">\r\n                {                    \r\n                    codeArr.map((item, index) =>                    \r\n                        \r\n                        <div key={index} className='code-card'>                        \r\n                            {/* <div className='code-index'>\r\n                                {index+1}\r\n                            </div> */}\r\n                            <div className='code-title'>\r\n                                {item.name}\r\n                            </div>                        \r\n                            <div className='code-description'>\r\n                                Description: {item.description}\r\n                            </div>\r\n                            <div className='code-date-created'>\r\n                                Created: {new Date(item.created_at).toLocaleDateString()}\r\n                            </div>\r\n                            <div className='code-date-modified'>\r\n                                Modified: {new Date(item.updated_at).toLocaleDateString()}, {item.freshness} days ago\r\n                            </div>                        \r\n                            <div className='code-size'>\r\n                                Size: {item.size.toLocaleString()} KB\r\n                            </div>\r\n                            <div className='code-url'>\r\n                                <a href={item.html_url} rel=\"noreferrer\" target='_blank'>View Code</a> - {item.homepage ? <a href={item.homepage} target='_blank' rel=\"noreferrer\">View Demo</a> : <s>View Demo</s>}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\n// IDEAS for BASIC data visualization (start small bro)\r\n\r\n// 1. Bar: Least updated repo (days since last modified) - arrange bar graph from largest to smallest, (optional: splice to only inc first 3-5, otherwise split graphs by tab to show max i.e. 10 data)\r\n\r\n// 2. Doughnut: Size of all repos into doughnut graph\r\n\r\n// 3. Area-line-bounary: number of commits (aka contributions) per repository for first user https://api.github.com/repos/icyrealm/icyrealm.github.io/contributors, repositories arranged by date created\r\n\r\n// Generate graphs for only the first 6-9 repos\r\n\r\n\r\n\r\n\r\n// 4. Arrange cards by most recently created OR recently modified\r\n","import * as React from 'react';\r\nimport {Bar, Doughnut, Line} from 'react-chartjs-2';\r\n\r\n\r\nexport default class BarComponent extends React.Component{  \r\n\r\n  // Initialize variables\r\n  constructor(props){\r\n    super(props);\r\n    this.randomCode = this.randomCode.bind(this);\r\n    this.state = {\r\n        user: 'icyrealm',\r\n        maxGraphItems: '10',\r\n        graphXData: [],\r\n        graphYDataFreshness: [10,4,3,5,6,8,3,5,6,7,8,10],\r\n        graphYDataSize: [1,2,3,4,5,6,7,8,9,10]\r\n    };\r\n\r\n  }\r\n\r\n  // Called after component is rendered, call randomCode\r\n  async componentDidMount(){\r\n    this.randomCode();\r\n  }\r\n\r\n  componentDidUpdate(prevProps){\r\n    if(prevProps.name !== this.props.name){\r\n        this.setState({          \r\n            user: this.props.name\r\n        });\r\n    }\r\n    this.randomCode();\r\n  }\r\n\r\n  // \r\n  async randomCode(){\r\n\r\n    // Get rest api data\r\n    async function getApiData(userRepo){\r\n      const url = 'https://api.github.com/users/'+userRepo+'/repos';\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      let dataArr = [];\r\n      try {\r\n          dataArr = data;\r\n      } catch(e) {\r\n          console.log(\"Data could not be parsed.\");     \r\n      }\r\n      if (!Array.isArray(dataArr)){\r\n          dataArr = [];\r\n      }\r\n\r\n      // Append attribute (freshness) to each object (repo) in dataArr\r\n      for (let i = dataArr.length - 1; i >= 0; i -= 1) {\r\n        const date1 = new Date();\r\n        const date2 = new Date(dataArr[i].updated_at);            \r\n        const diffTime = Math.abs(date2 - date1);\r\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); \r\n        dataArr[i].freshness = diffDays;                           \r\n      }\r\n\r\n      return dataArr;\r\n    }\r\n\r\n    // Use promise to sequentially append resulting object attributes to state\r\n    const ids = [1];\r\n    Promise.all(ids.map(id => getApiData(this.props.name))).then(results => {\r\n      let resultantArr = results[0];\r\n      let repoNameArr = [], repoFreshnessArr = [], repoSizeArr = [];\r\n      for (let i = 0; i <= this.state.maxGraphItems; i++) {\r\n        try{\r\n          repoNameArr.push(resultantArr[i].name);\r\n          repoFreshnessArr.push(resultantArr[i].freshness);\r\n          repoSizeArr.push(resultantArr[i].size);\r\n        } catch (error){\r\n        }\r\n      }\r\n      this.setState({\r\n        graphXData: repoNameArr,\r\n        graphYDataFreshness: repoFreshnessArr,\r\n        graphYDataSize: repoSizeArr\r\n      }); \r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    // Data Commit Days Object\r\n    const dataCommitDays = {\r\n      labels: this.state.graphXData,\r\n      datasets: [\r\n        {\r\n          label: 'Days since last commit',\r\n          backgroundColor: 'rgba(185, 198, 255,0.2)',\r\n          borderColor: 'rgba(185, 198, 255,1)',\r\n          borderWidth: 1,\r\n          hoverBackgroundColor: 'rgba(185, 198, 255,0.4)',\r\n          hoverBorderColor: 'rgba(185, 198, 255,1)',\r\n          data: this.state.graphYDataFreshness\r\n        }\r\n      ]\r\n    };\r\n\r\n    // Data Size Object\r\n    const dataSize = {\r\n      labels: this.state.graphXData,\r\n      datasets: [\r\n        {\r\n          label: 'Days since last commit',\r\n          backgroundColor: 'rgba(185, 198, 255,0.2)',\r\n          borderColor: 'rgba(185, 198, 255,1)',\r\n          borderWidth: 1,\r\n          hoverBackgroundColor: 'rgba(185, 198, 255,0.4)',\r\n          hoverBorderColor: 'rgba(185, 198, 255,1)',\r\n          data: this.state.graphYDataSize\r\n        }\r\n      ]\r\n    };\r\n\r\n    return (\r\n      <div className=\"charts-container\">\r\n        \r\n        <div> \r\n          <Bar\r\n            data={dataCommitDays}\r\n            width={100}\r\n            height={50}\r\n            options={{\r\n              maintainAspectRatio: true,\r\n              scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    }, scaleLabel: {\r\n                      display: true,\r\n                      labelString: 'Days Since Last Commit'\r\n                    }\r\n                }], xAxes: [{\r\n                  scaleLabel: {\r\n                    display: true,\r\n                    labelString: 'Code Repository'\r\n                  }\r\n              }]\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div> \r\n            <Doughnut\r\n            data={dataSize}\r\n            width={100}\r\n            height={50}\r\n            options={{\r\n              maintainAspectRatio: true,\r\n              scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true\r\n                    }, scaleLabel: {\r\n                      display: true,\r\n                      labelString: 'Size (KB)'\r\n                    }\r\n                }], xAxes: [{\r\n                  scaleLabel: {\r\n                    display: true,\r\n                    labelString: 'Code Repository'\r\n                  }\r\n              }]\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n\r\n       \r\n    </div>\r\n      \r\n    );\r\n  }\r\n};","import React from 'react';\nimport './App.css';\nimport CodeRepoCards from './components/CodeRepoCards';\nimport BarComponent from './components/BarComponent';\nimport MetaTags from 'react-meta-tags';\n\nclass App extends React.Component {\n    // Initialize variables\n    constructor(props){\n      super(props);\n      this.handleChange = this.handleChange.bind(this);\n      this.state = {\n          userRepo: 'icyrealm',\n      };\n  \n    }\n\n    handleChange(e) {\n      this.setState({             \n        userRepo: e.target.value\n      });\n  } \n\n  render() {\n    return <div className=\"App\">\n       <MetaTags>\n        <title>Github Repository Analyzer App v.1</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"></meta>\n      </MetaTags>\n      <header className=\"App-header\">\n        <h1>\n          Github Repository Analyzer App v.1\n        </h1>\n        <h2>\n          This repository is automatically generated via React + GitHub API.\n        </h2>   \n      </header>\n      <div className=\"group\">\n          <label>User: </label>\n          <input\n              type=\"text\"\n              id=\"markdown-content\"\n              onChange={this.handleChange}\n              defaultValue={this.state.userRepo}\n          />\n      </div>\n      <BarComponent name={this.state.userRepo}></BarComponent>\n      <CodeRepoCards name={this.state.userRepo}></CodeRepoCards>\n      <footer>\n           Version 1.0         \n      </footer>\n    </div>\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}